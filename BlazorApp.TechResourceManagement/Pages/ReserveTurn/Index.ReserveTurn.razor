@using BlazorApp.TechResourceManagement.Bussiness
@using BlazorApp.TechResourceManagement.Domain
@using BlazorApp.TechResourceManagement.Models
@using BlazorApp.TechResourceManagement.Pages.Home.Components
@using System.ComponentModel.DataAnnotations
@using BlazorApp.TechResourceManagement.Pages.ReserveTurn.Components

@attribute [Authorize]

@inject DialogService DialogService
@inject GestorRTRT _gestorRTRT
@inject IJSRuntime JsRuntime

@page "/reserveTurn"

<div class="container-fluid">
    <div class="px-3 py-4">
        @if (cmbTiposRecursosTecnologicos == null)
        {
            <Loading />
        }
        else
        {
            <h3>Reservar turno de recurso tecnológico</h3>
            <div class="row g-3">
                <div class="col-12">
                    <div class="form-group">
                        <label for="Dni">Tipo de Recurso Tecnologico: </label>
                         <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Class="w-100" 
                            Placeholder="Todas" Data=@cmbTiposRecursosTecnologicos TextProperty="MostrarCategoria" ValueProperty="MostrarCategoria" Change=@(args => TomarSeleccionTipoRecurso(args)) />
                </div>
            </div>
            @if (gridCIsConRecursosTecnologicos != null)
                {
                    <div class="accordion" id="acordionCIs">
                        @foreach (var ci in gridCIsConRecursosTecnologicos)
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="panel-heading-@ci.CI.Sigla">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panel-@ci.CI.Sigla" aria-expanded="true" aria-controls="panel-@ci.CI.Sigla">
                                        @ci.CI.Nombre
                                    </button>
                                </h2>
                                <div id="panel-@ci.CI.Sigla" class="accordion-collapse collapse show" aria-labelledby="panel-heading-@ci.CI.Sigla" data-bs-parent="#acordionCIs">
                                    <div class="accordion-body">
                                        <table class="table table-striped table-responsive-xl">
                                            <thead>
                                                <tr>
                                                    <th>Nro Recurso Tecnologico</th>
                                                    <th>Marca</th>
                                                    <th>Modelo</th>
                                                    <th>Estado</th>
                                                    <th>Acciones</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var rt in ci.RecursosTecnologicos)
                                                {
                                                    <tr>
                                                        <td>@rt.Recurso.NumeroRT</td>
                                                        <td>@rt.Recurso.ModeloDelRT.Nombre</td>
                                                        <td>@rt.MarcaDelRt.Nombre</td>
                                                        @switch (rt.Recurso.GetEstadoActual())
                                                        {
                                                            case "Disponible":
                                                                <td><h3 class="badge bg-primary">@rt.Recurso.GetEstadoActual()</h3></td>
                                                                break;
                                                            case "EnMantenimiento":
                                                                <td><h3 class="badge bg-success">@rt.Recurso.GetEstadoActual()</h3></td>
                                                                break;
                                                            case "ConIngresoEnMantenimientoCorrectivo":
                                                                <td><h3 class="badge bg-secondary">@rt.Recurso.GetEstadoActual()</h3></td>
                                                                break;
                                                        }
                                                        <td>
                                                            <div class=" btn-group">
                                                                @if (estaSeleccionado && rt.Recurso.NumeroRT == txtRTSeleccionado)
                                                                {
                                                                    <button type="button" class="btn btn-primary btn-sm" @onclick="(args)=> SolicitarDeseleccionRecursoTecnologico(rt.Recurso.NumeroRT, ci.CI.Sigla)">
                                                                        <i class="fa-solid fa-square-check"></i>
                                                                    </button>
                                                                }
                                                                else
                                                                {
                                                                    <button type="button" class="btn btn-danger btn-sm" @onclick="(args)=> SolicitarSeleccionRecursoTecnologico(rt.Recurso.NumeroRT, ci.CI.Sigla)">
                                                                        <i class="fa-solid fa-square-minus"></i>
                                                                    </button>
                                                                }
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                                @if (ci.RecursosTecnologicos.Count == 0)
                                                {
                                                    <tr class="text-center">
                                                        <td colspan="5">
                                                            <span class="badge bg-secondary">Table no contain elements. Table is empty</span>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>

            if (gridTurnos != null)
            {
                <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Turno" Data=@gridTurnos StartProperty="FechaHoraInicio" EndProperty="FechaHoraFin"
                         SelectedIndex="2" TextProperty="Text"
                         SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
                    <RadzenDayView />
                    <RadzenWeekView />
                    <RadzenMonthView />
                </RadzenScheduler>
            }
        }
    </div>
</div>

@code {

    private string cmbTpSeleccionado { get; set; }
    private long txtRTSeleccionado { get; set; }
    private string txtCISeleccionado { get; set; }
    private bool estaSeleccionado { get; set; } = false;
    private RadzenScheduler<Turno> scheduler;
    private IList<TipoRecursoTecnologico> cmbTiposRecursosTecnologicos { get; set; }
    private IList<dynamic> gridCIsConRecursosTecnologicos { get; set; }
    private IList<Turno> gridTurnos { get; set; }

    //Metodo Inicilizador de la Pantalla
    protected override async Task OnInitializedAsync()
    {
        //Dependencia al GestorRTRT se inyecta arriba @inject
        await SolicitarSeleccionTiposRecursosTecnologicos();
    }

    //Muestra los tipos de recursos tecnologicos
    private async Task SolicitarSeleccionTiposRecursosTecnologicos()
    {
        cmbTiposRecursosTecnologicos = await _gestorRTRT.ReservarTurnoRecursoTecnologico();
        this.gridCIsConRecursosTecnologicos = await _gestorRTRT.TomarTipoRecurso(this.cmbTpSeleccionado);
    }

    //On Change Seleccion Tipo Recurso Tecnologico
    private async Task TomarSeleccionTipoRecurso(object value)
    {
        var cmbTpSeleccionado = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        this.cmbTpSeleccionado = cmbTpSeleccionado.ToString();
        this.gridCIsConRecursosTecnologicos = await _gestorRTRT.TomarTipoRecurso(this.cmbTpSeleccionado);
    }

    //On Change Seleccion Recurso Tecnologico
    private async Task SolicitarSeleccionRecursoTecnologico(long txtRTSeleccionado, string txtCISeleccionado)
    {
        this.TomarSeleccionRecursoTecnologico(txtRTSeleccionado, txtCISeleccionado);

        //Obtener los turnos
        gridTurnos = await _gestorRTRT.TomarRecursoTecnologico(this.txtRTSeleccionado, this.txtCISeleccionado);
        if (gridTurnos == null)
        {
            //this.ClearRecursoSeleccionado();
            await JsRuntime.InvokeAsync<string>("alert", "El cientifico logueado no pertenece a ese centro de investigacion");
        }
    }

    //On Change Seleccion Recurso Tecnologico
    private async Task SolicitarDeseleccionRecursoTecnologico(long txtRTSeleccionado, string txtCISeleccionado)
    {
        if (txtRTSeleccionado == this.txtRTSeleccionado)
        {
            this.ClearRecursoSeleccionado();
        }
    }

    private void TomarSeleccionRecursoTecnologico(long txtRTSeleccionado, string txtCISeleccionado)
    {
        this.estaSeleccionado = txtRTSeleccionado != this.txtRTSeleccionado ? true : !this.estaSeleccionado;
        this.txtRTSeleccionado = txtRTSeleccionado;
        this.txtCISeleccionado = txtCISeleccionado;
    }

    private void ClearRecursoSeleccionado()
    {
        this.estaSeleccionado = !this.estaSeleccionado;
        this.txtCISeleccionado = string.Empty;
        this.txtRTSeleccionado = 0;
    }

    public void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    public async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Turno data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        if (data != null)
        {
            gridTurnos.Add(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    public async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Turno> args)
    {
        await scheduler.Reload();
    }

    public void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Turno> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
        switch (args.Data.MostrarTurno().MostrarEstadoActual())
        {
            case "Disponible":
                args.Attributes["class"] = "p-3 mb-2 bg-primary text-white";
                break;
            case "PendienteConfirmacion":
                args.Attributes["class"] = "p-3 mb-2 bg-secondary text-white";
                break;
            case "Reservado":
                args.Attributes["class"] = "p-3 mb-2 bg-danger text-white";
                break;
        }
    }
}
