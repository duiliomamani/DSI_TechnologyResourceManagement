@using BlazorApp.TechResourceManagement.Bussiness
@using BlazorApp.TechResourceManagement.Domain
@using BlazorApp.TechResourceManagement.Pages.Home.Components
@using System.ComponentModel.DataAnnotations

@attribute [Authorize] 

@inject NavigationManager _navigationManager
@inject GestorRTRT _gestorRTRT
@inject IJSRuntime JsRuntime

@page "/reserveTurn"

<div class="container-fluid">
    <div class="px-3 py-4">
        @if (cmbTiposRecursosTecnologicos == null)
        {
            <Loading />
        }
        else
        {
            <h3>Reservar turno de recurso tecnológico</h3>
            <EditForm Model="@modelData" OnValidSubmit="SendDto" class="row g-3">
                <div class="col-12">
                    <div class="form-group">
                        <label for="Dni">Tipo de Recurso Tecnologico: </label>
                        <InputSelect id="TpRecursoTecnologico"
                                 class="form-select"
                                 ValueExpression="@(()=>cmbTpSeleccionado)"
                                 Value="@cmbTpSeleccionado"
                                 ValueChanged="@((string cmbTpSeleccionado) => TomarSeleccionTipoRecurso(cmbTpSeleccionado))">
                            <option value="null">TODAS</option>
                            @foreach (var tp in cmbTiposRecursosTecnologicos)
                            {
                                <option value="@tp.MostrarCategoria()">@tp.MostrarCategoria()</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                @if (gridCIsConRecursosTecnologicos != null)
                {
                    <div class="accordion" id="acordionCIs">
                        @foreach (var ci in gridCIsConRecursosTecnologicos)
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="panel-heading-@ci.sigla">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panel-@ci.sigla" aria-expanded="true" aria-controls="panel-@ci.sigla">
                                        @ci.datosCI
                                    </button>
                                </h2>
                                <div id="panel-@ci.sigla" class="accordion-collapse collapse show" aria-labelledby="panel-heading-@ci.sigla" data-bs-parent="#acordionCIs">
                                    <div class="accordion-body">
                                        <table class="table table-striped table-responsive-xl">
                                            <thead>
                                                <tr>
                                                    <th>Nro Recurso Tecnologico</th>
                                                    <th>Marca</th>
                                                    <th>Modelo</th>
                                                    <th>Estado</th>
                                                    <th>Acciones</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var rt in ci.recursosTecnologicos)
                                                {
                                                    <tr>
                                                        <td>@rt.numeroRT</td>
                                                        <td>@rt.modeloDelRT</td>
                                                        <td>@rt.marcaDelRt</td>
                                                        @switch (rt.estadoActual)
                                                        {
                                                            case "Disponible":
                                                                <td><h3 class="badge bg-primary">@rt.estadoActual</h3></td>
                                                                break;
                                                            case "EnMantenimiento":
                                                                <td><h3 class="badge bg-success">@rt.estadoActual</h3></td>
                                                                break;
                                                            case "ConIngresoEnMantenimientoCorrectivo":
                                                                <td><h3 class="badge bg-secondary">@rt.estadoActual</h3></td>
                                                                break;
                                                        }
                                                        <td>
                                                            <div class=" btn-group">
                                                                @if (estaSeleccionado && rt.numeroRT == txtRTSeleccionado)
                                                                {
                                                                    <button type="button" class="btn btn-primary btn-sm" @onclick="(args)=> SolicitarDeseleccionRecursoTecnologico(rt.numeroRT, ci.sigla)">
                                                                        <i class="fa-solid fa-square-check"></i>
                                                                    </button>
                                                                }
                                                                else
                                                                {
                                                                    <button type="button" class="btn btn-danger btn-sm" @onclick="(args)=> SolicitarSeleccionRecursoTecnologico(rt.numeroRT, ci.sigla)">
                                                                        <i class="fa-solid fa-square-minus"></i>
                                                                    </button>
                                                                }
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                                @if (ci.recursosTecnologicos.Count == 0)
                                                {
                                                    <tr class="text-center">
                                                        <td colspan="5">
                                                            <span class="badge bg-secondary">Table no contain elements. Table is empty</span>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </EditForm>
        }
    </div>
</div>

@code {

    public class ModelData { }

    public string cmbTpSeleccionado { get; set; }
    public long txtRTSeleccionado { get; set; }
    public string txtCISeleccionado { get; set; }
    public bool estaSeleccionado { get; set; } = false;

    private IList<TipoRecursoTecnologico> cmbTiposRecursosTecnologicos { get; set; }

    private IList<dynamic> gridCIsConRecursosTecnologicos { get; set; }

    private IList<Turno> gridTurnos { get; set; }

    private ModelData modelData { get; set; } = new ModelData();

    //Metodo Inicilizador de la Pantalla
    protected override async Task OnInitializedAsync()
    {
        //Dependencia al GestorRTRT se inyecta arriba @inject
        await SolicitarSeleccionTiposRecursosTecnologicos();
    }

    //Muestra los tipos de recursos tecnologicos
    private async Task SolicitarSeleccionTiposRecursosTecnologicos()
    {
        cmbTiposRecursosTecnologicos = await _gestorRTRT.ReservarTurnoRecursoTecnologico();
        this.gridCIsConRecursosTecnologicos = await _gestorRTRT.TomarTipoRecurso(this.cmbTpSeleccionado);
    }

    //On Change Seleccion Tipo Recurso Tecnologico
    private async Task TomarSeleccionTipoRecurso(string cmbTpSeleccionado)
    {
        this.cmbTpSeleccionado = cmbTpSeleccionado;
        this.gridCIsConRecursosTecnologicos = await _gestorRTRT.TomarTipoRecurso(this.cmbTpSeleccionado);
    }

    //On Change Seleccion Recurso Tecnologico
    private async Task SolicitarSeleccionRecursoTecnologico(long txtRTSeleccionado, string txtCISeleccionado)
    {
        this.TomarSeleccionRecursoTecnologico(txtRTSeleccionado, txtCISeleccionado);

        //Obtener los turnos
        gridTurnos = await _gestorRTRT.TomarRecursoTecnologico(this.txtRTSeleccionado, this.txtCISeleccionado);
        if (gridTurnos == null)
        {
            this.ClearRecursoSeleccionado();
            await JsRuntime.InvokeAsync<string>("alert", "El cientifico logueado no pertenece a ese centro de investigacion");
        }
    }

    //On Change Seleccion Recurso Tecnologico
    private async Task SolicitarDeseleccionRecursoTecnologico(long txtRTSeleccionado, string txtCISeleccionado)
    {
        if (txtRTSeleccionado == this.txtRTSeleccionado)
        {
            this.ClearRecursoSeleccionado();
        }
    }

    private void TomarSeleccionRecursoTecnologico(long txtRTSeleccionado, string txtCISeleccionado)
    {
        this.estaSeleccionado = txtRTSeleccionado != this.txtRTSeleccionado? true : !this.estaSeleccionado;
        this.txtRTSeleccionado = txtRTSeleccionado;
        this.txtCISeleccionado = txtCISeleccionado;
    }

    private void ClearRecursoSeleccionado()
    {
        this.estaSeleccionado = !this.estaSeleccionado;
        this.txtCISeleccionado = string.Empty;
        this.txtRTSeleccionado = 0;
    }

    public void SendDto()
    {
    }
}
