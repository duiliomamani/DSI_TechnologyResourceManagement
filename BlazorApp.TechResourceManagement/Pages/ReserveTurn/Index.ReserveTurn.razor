@using BlazorApp.TechResourceManagement.Bussiness
@using BlazorApp.TechResourceManagement.Domain
@using BlazorApp.TechResourceManagement.Pages.Home.Components
@using System.ComponentModel.DataAnnotations

@inject NavigationManager _navigationManager
@inject IGestorRTRT _gestorRTRT

@page "/reserveTurn"

<div class="container-fluid">
    <div class="px-3 py-4">
        @if (cmbTiposRecursosTecnologicos == null)
        {
            <Loading />
        }
        else
        {
            <h3>Index.ReserveTurn</h3>
            <EditForm Model="@modelData" OnValidSubmit="SendDto" class="row g-3">
                <div class="col-12">
                    <div class="form-group">
                        <label for="Dni">Tipo de Recurso Tecnologico: </label>
                        <InputSelect id="TpRecursoTecnologico"
                                 class="form-select"
                                 ValueExpression="@(()=>cmbTpSeleccionado)" Value="@cmbTpSeleccionado"
                                 ValueChanged="@((string cmbTpSeleccionado) => SolicitarSeleccionTipoRecurso(cmbTpSeleccionado))">
                            <option value="null">TODAS</option>
                            @foreach (var tp in cmbTiposRecursosTecnologicos)
                        {
                            <option value="@tp.MostrarCategoria()">@tp.MostrarCategoria()</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <ul>
                @if (gridRecursosTecnologicos != null)
                    {

                        @foreach (var rt in gridRecursosTecnologicos)
                        {
                            <li>
                                @rt.MostrarRT()
                            </li>
                        }
                    }
                </ul>
            </EditForm>
        }
    </div>
</div>

@code {

    public class ModelData { }

    public string cmbTpSeleccionado { get; set; }

    private IList<TipoRecursoTecnologico> cmbTiposRecursosTecnologicos { get; set; }

    private IList<RecursoTecnologico> gridRecursosTecnologicos { get; set; }

    private ModelData modelData { get; set; } = new ModelData();

    //Metodo Inicilizador de la Pantalla
    protected override async Task OnInitializedAsync()
    {
        //Dependencia al GestorRTRT se inyecta arriba @inject
        await MostrarTiposRecursosTecnologicos();
    }

    private async Task MostrarTiposRecursosTecnologicos()
    {
        cmbTiposRecursosTecnologicos = await _gestorRTRT.reservarTurnoRecursoTecnologico();
    }

    //On Change Seleccion Tipo Recurso Tecnologico
    private async Task SolicitarSeleccionTipoRecurso(string cmbTpSeleccionado)
    {
        this.cmbTpSeleccionado = cmbTpSeleccionado;
        await MostrarRecursosTecnologicos();
    }

    private async Task MostrarRecursosTecnologicos()
    {
        this.gridRecursosTecnologicos = await _gestorRTRT.tomarTipoRecurso(this.cmbTpSeleccionado);
    }


    public void SendDto()
    {
    }
}
